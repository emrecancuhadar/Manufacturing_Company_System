Due Date: 21.04.2025 23:59
Homework 2

CENG431 – Building Software Systems

In this homework, you are expected to implement a Manufacturing Company System in Java.
You should fulfill the concepts:

    State Design Pattern

    Composite Design Pattern

    GRASP

In the Manufacturing Company System, there are components that can be either a raw material, a paint, a hardware, or a product.
For example, a table is a product that is made from raw materials (such as wood planks), paint (such as wood varnish), and hardware like screws.
Similarly, products such as chairs, coffee tables, side tables, dressers, and TV units are made using raw materials, paint, and hardware.

    The raw materials, paint, and hardware are the most basic elements in the system and cannot be broken down further.

    Products can combine multiple such components and allow for hierarchical composition.

    This structure allows all components—product, paint, hardware, or raw material—to be handled consistently, such as:

        calculating total cost,

        generating reports,

        or validating stock availability.

Each manufacturing process transitions through different operational states that reflect its current status:

    Initially, a product starts in the WaitingForStock state until all the necessary components are available in sufficient quantity.

    If a stock inconsistency is detected at this stage (e.g., missing or invalid quantities), the process transitions to the Failed state.

    If stock requirements are satisfied, it moves into the InManufacturing state where components are assembled.

    If successful, it transitions to the Completed state and updates inventory with the manufactured product.

    If an inconsistency occurs (e.g., damaged component or system error), it also transitions to the Failed state.

This state-based behavior encapsulates the logic of each stage independently, ensuring a robust and modular manufacturing workflow.

The details of the components and the products are given in the attached components.csv and products.csv files.

    In the last column of the products.csv file, the quantity of each product to be manufactured is specified.

    The system will attempt to manufacture each product one by one, in order, without batching (e.g., not producing all 20 chairs before moving on).

During the InManufacturing state, a random number is generated to determine the outcome:

    1: Successful Manufacturing

    2: Unsuccessful Manufacturing — System Error

    3: Unsuccessful Manufacturing — Damaged Component

Final Report Requirements:

    Number of products successfully manufactured, with total cost and weight.

    Number of products that failed due to system error.

    Number of products that failed due to damaged components.

    Number of products that failed due to stock shortage.

Additional Notes:

    Include a UML class diagram in your ZIP file (in PDF format).

    Do NOT request inputs in your app. Just print:

        Component details and manufacturing states of each product

        The final report

    Write clean, readable, tester-friendly code

        Maximize reusability

        Minimize redundancy

Assignment Rules:

    No cheating. If caught, grade = 0.

    Submit in groups. Only one person needs to submit.

    Export your project as a Visual Studio Code project.

        Test that it works in VS Code.

        You may use other IDEs.

        If VS Code can't import the project, you’ll lose points.

    Submit through MS Teams.

    Project name format:

        G05_CENG431_HW2

        ZIP file: G05_CENG431_HW2.zip

    Naming and export rules must be followed. Otherwise, points will be deducted.

    Submissions may be used in research anonymously.

        If you do not consent, email the instructor (Dr. Tuglular).
